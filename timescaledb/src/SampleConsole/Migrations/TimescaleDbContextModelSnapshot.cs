// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SampleConsole.Data;

namespace SampleConsole.Migrations
{
    [DbContext(typeof(TimescaleDbContext))]
    partial class TimescaleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SampleConsole.Models.Condition", b =>
                {
                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasIndex(new[] { "Time" }, "conditions_time_idx");

                    b.ToTable("conditions");
                });

            modelBuilder.Entity("SampleConsole.Models.SensorData", b =>
                {
                    b.Property<double?>("Cpu")
                        .HasColumnType("double precision")
                        .HasColumnName("cpu");

                    b.Property<int?>("SensorId")
                        .HasColumnType("integer")
                        .HasColumnName("sensor_id");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasIndex(new[] { "SensorId", "Time" }, "sensor_data_sensor_id_time_idx");

                    b.HasIndex(new[] { "Time" }, "sensor_data_time_idx");

                    b.ToTable("sensor_data");
                });

            modelBuilder.Entity("SampleConsole.Models.SimpleData", b =>
                {
                    b.Property<double>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.HasIndex(new[] { "Id" }, "conditions_id_idx");

                    b.ToTable("simpledata");
                });

            modelBuilder.Entity("SampleConsole.Models.SimpleSmallData", b =>
                {
                    b.Property<float>("Humidity")
                        .HasColumnType("real")
                        .HasColumnName("humidity");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("temperature");

                    b.HasIndex(new[] { "Id" }, "conditions_id_idx");

                    b.ToTable("simplesmalldata");
                });
#pragma warning restore 612, 618
        }
    }
}
